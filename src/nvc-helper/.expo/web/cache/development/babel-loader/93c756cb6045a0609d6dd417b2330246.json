{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { StatusBar } from 'expo-status-bar';\nimport React, { useEffect, useState } from 'react';\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar Stack = createNativeStackNavigator();\n\nvar MyApp = function MyApp() {\n  var _useState = useState(true),\n      _useState2 = _slicedToArray(_useState, 2),\n      isLoading = _useState2[0],\n      setLoading = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      data = _useState4[0],\n      setData = _useState4[1];\n\n  var getFeelings = function () {\n    var _ref = _asyncToGenerator(function* () {\n      try {\n        var response = yield fetch('http://localhost:3000/feelings?language=en-US');\n        var json = yield response.json();\n        setData(json);\n      } catch (error) {\n        console.error(error);\n      } finally {\n        setLoading(false);\n      }\n    });\n\n    return function getFeelings() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  useEffect(function () {\n    getFeelings();\n  }, []);\n  return _jsx(NavigationContainer, {\n    children: _jsx(View, {\n      style: {\n        flex: 1,\n        padding: 24\n      },\n      children: isLoading ? _jsx(ActivityIndicator, {}) : _jsx(FlatList, {\n        data: data,\n        keyExtractor: function keyExtractor(_ref2, index) {\n          var id = _ref2.id;\n          return id;\n        },\n        renderItem: function renderItem(_ref3) {\n          var item = _ref3.item;\n          return _jsx(Button, {\n            title: item.feeling,\n            onPress: function onPress() {\n              return Alert.alert('Left button pressed');\n            },\n            color: \"#841584\",\n            accessibilityLabel: item.description\n          });\n        }\n      })\n    })\n  });\n};\n\nexport default MyApp;","map":{"version":3,"names":["StatusBar","React","useEffect","useState","NavigationContainer","createNativeStackNavigator","Stack","MyApp","isLoading","setLoading","data","setData","getFeelings","response","fetch","json","error","console","flex","padding","index","id","item","feeling","Alert","alert","description"],"sources":["/home/thostr/src/nvc-helper/src/nvc-helper/App.js"],"sourcesContent":["import { StatusBar } from 'expo-status-bar';\nimport React, { useEffect, useState } from 'react';\nimport { ActivityIndicator, FlatList, Text, View, Button, Alert} from 'react-native';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\n\nconst Stack = createNativeStackNavigator();\n\nconst  MyApp = () => {\n  \n  const [isLoading, setLoading] = useState(true);\n  const [data, setData] = useState([]);\n\n  const getFeelings = async () => {\n     try {\n      const response = await fetch('http://localhost:3000/feelings?language=en-US');\n      const json = await response.json();\n      setData(json);\n    } catch (error) {\n      console.error(error);\n    } finally {\n      setLoading(false);\n    }\n  }\n\n  useEffect(() => {\n    getFeelings();\n  }, []);\n\n  return (\n    <NavigationContainer>\n      <View style={{ flex: 1, padding: 24 }}>\n        {isLoading ? <ActivityIndicator/> : (\n          <FlatList\n            data={data}\n            keyExtractor={({ id }, index) => id}\n            renderItem={({ item }) => (\n\n    //           <Text> {item.feeling} </Text>\n              <Button\n    title={item.feeling}\n    onPress={() => Alert.alert('Left button pressed')}\n    color=\"#841584\"\n    accessibilityLabel={item.description}\n  />\n            )}\n          />\n        )}\n      </View>\n    </NavigationContainer>\n  );\n};\n\nexport default MyApp;"],"mappings":";;AAAA,SAASA,SAAT,QAA0B,iBAA1B;AACA,OAAOC,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;;;;;;;AAEA,SAASC,mBAAT,QAAoC,0BAApC;AACA,SAASC,0BAAT,QAA2C,gCAA3C;;AAEA,IAAMC,KAAK,GAAGD,0BAA0B,EAAxC;;AAEA,IAAOE,KAAK,GAAG,SAARA,KAAQ,GAAM;EAEnB,gBAAgCJ,QAAQ,CAAC,IAAD,CAAxC;EAAA;EAAA,IAAOK,SAAP;EAAA,IAAkBC,UAAlB;;EACA,iBAAwBN,QAAQ,CAAC,EAAD,CAAhC;EAAA;EAAA,IAAOO,IAAP;EAAA,IAAaC,OAAb;;EAEA,IAAMC,WAAW;IAAA,6BAAG,aAAY;MAC7B,IAAI;QACH,IAAMC,QAAQ,SAASC,KAAK,CAAC,+CAAD,CAA5B;QACA,IAAMC,IAAI,SAASF,QAAQ,CAACE,IAAT,EAAnB;QACAJ,OAAO,CAACI,IAAD,CAAP;MACD,CAJA,CAIC,OAAOC,KAAP,EAAc;QACdC,OAAO,CAACD,KAAR,CAAcA,KAAd;MACD,CANA,SAMS;QACRP,UAAU,CAAC,KAAD,CAAV;MACD;IACF,CAVgB;;IAAA,gBAAXG,WAAW;MAAA;IAAA;EAAA,GAAjB;;EAYAV,SAAS,CAAC,YAAM;IACdU,WAAW;EACZ,CAFQ,EAEN,EAFM,CAAT;EAIA,OACE,KAAC,mBAAD;IAAA,UACE,KAAC,IAAD;MAAM,KAAK,EAAE;QAAEM,IAAI,EAAE,CAAR;QAAWC,OAAO,EAAE;MAApB,CAAb;MAAA,UACGX,SAAS,GAAG,KAAC,iBAAD,KAAH,GACR,KAAC,QAAD;QACE,IAAI,EAAEE,IADR;QAEE,YAAY,EAAE,6BAASU,KAAT;UAAA,IAAGC,EAAH,SAAGA,EAAH;UAAA,OAAmBA,EAAnB;QAAA,CAFhB;QAGE,UAAU,EAAE;UAAA,IAAGC,IAAH,SAAGA,IAAH;UAAA,OAGV,KAAC,MAAD;YACV,KAAK,EAAEA,IAAI,CAACC,OADF;YAEV,OAAO,EAAE;cAAA,OAAMC,KAAK,CAACC,KAAN,CAAY,qBAAZ,CAAN;YAAA,CAFC;YAGV,KAAK,EAAC,SAHI;YAIV,kBAAkB,EAAEH,IAAI,CAACI;UAJf,EAHU;QAAA;MAHd;IAFJ;EADF,EADF;AAsBD,CA3CD;;AA6CA,eAAenB,KAAf"},"metadata":{},"sourceType":"module"}